#!/usr/bin/python3
import subprocess
import sys
import datetime
import json
import os
import time
import datetime
import socket
import httpx
import asyncio
from concurrent.futures import ThreadPoolExecutor,as_completed
from urllib.parse import urlparse
from collections import defaultdict



TEMP_DIR="temp"
amass_output_file=""
subfinder_output_file=""
findomain_output_file=""
assetfinder_output_file=""
final_output_file=""

def run_amass(domain_name):
    sources=(
            "arin, abuseipdb, alientvault, alterations, anubisdb, archiveit, arquivo, ask, askdns, bgptools, bgpview, baidu, bing, brute forcing, bufferover , censys, certspotter, cloudflare, commoncrawl, crtsh, dnsdumpster, digitorus, duckduckgo, fullhunt, gists, googlect, greynoise, haw, hackerone, hackertarget, hyperstat, ipv4info, maltiverse, mnemonic, n45ht, networksdb, pkey, radb, rapiddns, riddler, robtex, searchcode, searx, shadowserver, sitedossier, sonarsearch, spyonweb, sublist3rapi, teamcymru, threatcrowd, threatminer, ukwebarchive, urlscan, wayback, yahoo"
            )
    cmd=[
            "/root/asm_tools/amaaaaaas/amass_linux_amd64_v_3_19_2/amass", "enum",
            "-d", domain_name,
            "-active",
            "-brute",
            "-src",
            "-ip",
            "-json", amass_output_file,
            "-include", sources
            ]
    print(f"<sys> running amass for {domain_name}")
    subprocess.run(cmd,check=True)
    return amass_output_file


def run_subfinder(domain_name):
    cmd=[
            "/usr/local/bin/subfinder",
            "-d", domain_name,
            "-all",
            "-recursive",
            "-active",
            "-ip",
            "-cs",
            "-json",
            "-o", subfinder_output_file,
            ]
    print(f"<sys> running subfinder for {domain_name}")
    subprocess.run(cmd,check=True)
    return subfinder_output_file


def run_findomain(domain_name):
    cmd=["/root/asm_tools/findomainnnnnn/findomain","--ip","-t",domain_name,"-u",findomain_output_file]
    print(f"<sys> running findomain for {domain_name}")
    subprocess.run(cmd,check=True)
    return findomain_output_file


def run_assetfinder(domain_name):
    cmd=["/root/asm_tools/assetfinderrrrr/assetfinder",domain_name]
    print(f"<sys> running assetfinder for {domain_name}")
    with open(assetfinder_output_file,'w')as f:
        subprocess.run(cmd,stdout=f,check=True)
    return assetfinder_output_file


def run_recon(domain):
    json_files=[]
    extra_files=[]
    with ThreadPoolExecutor(max_workers=4) as executor:
        futures=[]
        futures.append(executor.submit(run_amass,domain))
        futures.append(executor.submit(run_subfinder,domain))
        futures.append(executor.submit(run_findomain,domain))
        futures.append(executor.submit(run_assetfinder,domain))
        for future in futures:
            result=future.result()
            if isinstance(result,str) and result.endswith('.json'):
                json_files.append(result)
            else:
                extra_files.append(result)



def merge_result():
    ip_map=defaultdict(lambda:{"FQDN":set(),"kind":set()})
    with open(amass_output_file) as f1:
        for line in f1:
            data=json.loads(line)
            fqdn=data["name"]
            for addr in data.get("addresses",[]):
                ip=addr["ip"]
                ip_map[ip]["FQDN"].add(fqdn)
                ip_map[ip]["kind"].update(data.get("sources",[]))

    with open(subfinder_output_file) as f2:
        for line in f2:
            data=json.loads(line)
            fqdn=data["name"]
    with open(findomain_output_file) as f3:
        for line in f3:
            if ',' not in line:
                continue
            fqdn,ip=line.strip().split(",")
            ip_map[ip]["FQDN"].add(fqdn)
            ip_map[ip]["kind"].add("")
    with open(assetfinder_output_file) as f4:
        for line in f4:
            fqdn=line.strip()
    result={
            ip:{
                "FQDN":sorted(list(info["FQDN"])),
                "kind":sorted(list(info["kind"]))
                }
            for ip, info in ip_map.items()
            }
    with open(final_output_file,"w") as out:
        json.dump(result,out,indent=2)




if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: ./runner <domain>")
        sys.exit(1)
    time_now=datetime.datetime.now().strftime("%Y%m%d%H%M%S")
    domain = sys.argv[1]
    sanitized_domain=str(domain).replace('.','_')
    os.makedirs(TEMP_DIR,exist_ok=True)
    start_time=time.time()
    amass_output_file=os.path.join(TEMP_DIR,f"amass_{sanitized_domain}.json")
    subfinder_output_file=os.path.join(TEMP_DIR,f"subfinder_{sanitized_domain}.json")
    findomain_output_file=os.path.join(TEMP_DIR,f"findomain_{sanitized_domain}.txt")
    assetfinder_output_file=os.path.join(TEMP_DIR,f"assetfinder_{sanitized_domain}.txt")
    final_output_file=os.path.join(f"final_{sanitized_domain}.json")
    run_recon(domain)
    merge_result()
    end_time=time.time()
    print(f"Execution time: {datetime.timedelta(seconds=end_time-start_time)}")
